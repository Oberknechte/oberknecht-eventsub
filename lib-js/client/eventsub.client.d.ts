import { oberknechtAPI } from "oberknecht-api";
import { streamOnlineMessage } from "../parser/notifications/stream.online";
import { oberknechtEmitter } from "oberknecht-emitters";
import { eventsubClientOptions } from "../types/eventsub.client.options";
import { subscriptionType } from "../types/subscription.type";
import { channelModerateMessagev2 } from "../parser/notifications/channel.moderate.v2";
declare const onStreamOnlineCallback: (notification: streamOnlineMessage) => void;
declare const onModactionCallback: (notification: channelModerateMessagev2) => void;
declare const onErrorCallback: (e: Error) => void;
declare const onCloseCallback: (e: Record<string, any>) => void;
declare const onResubscribeCallback: (e: {
    success: boolean;
    resubscribeData?: Record<string, any>;
    resubscribeArgs: Array<any>;
    error?: Error;
}) => void;
export declare class oberknechtEventsub {
    #private;
    get symbol(): string;
    get clientData(): any;
    get clientWebsockets(): any;
    get clientWebsocketData(): any;
    get _options(): any;
    get WebSockets(): any;
    OberknechtEmitter: oberknechtEmitter;
    OberknechtAPI: oberknechtAPI;
    constructor(options: eventsubClientOptions);
    connect(): Promise<void>;
    on: (eventName: string | string[], callback: Function) => void;
    once: (eventName: string | string[], callback: Function) => void;
    onError: (callback: typeof onErrorCallback) => void;
    onClose: (callback: typeof onCloseCallback) => void;
    onResubscribe: (callback: typeof onResubscribeCallback) => void;
    closeWebsocket: (wsNum: number) => any;
    closeWebsockets: () => void;
    onStreamOnline(callback: typeof onStreamOnlineCallback): Promise<void>;
    onModaction(callback: typeof onModactionCallback): Promise<void>;
    subscribe(type: subscriptionType, condition: any, version?: string): Promise<import("oberknecht-api/lib-js/types/endpoints/eventsub").getEventsubSubscriptionsResponse>;
    unsubscribe(id: string): Promise<void>;
    unsubscribeAll(): Promise<void>;
    getSubscriptions(cacheOnly?: boolean, wsNum?: null): Promise<import("oberknecht-api/lib-js/types/endpoints/eventsub").getEventsubSubscriptionsResponse>;
    imitateMessage(message: Record<string, any>): Promise<void>;
    subscribeToStreamOnline(broadcasterLogins: string | string[] | undefined, broadcasterIDs?: string | string[], requestAll?: boolean): Promise<unknown>;
    subscribeToModactions(broadcasterLogins: string | string[] | undefined, broadcasterIDs?: string | string[]): Promise<unknown>;
}
export {};
